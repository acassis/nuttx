############################################################################
# arch/arm/src/efm32/Make.defs
#
#   Copyright (C) 2009, 2011-2014 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

ifeq ($(CONFIG_ARCH_CHIP_EFM32LG232F128),y)
CFLAGS += -DEFM32LG232F128
else ifeq ($(CONFIG_ARCH_CHIP_EFM32LG990F256),y)
CFLAGS += -DEFM32LG990F256
else ifeq ($(CONFIG_ARCH_CHIP_EFM32GG990F1024),y)
CFLAGS += -DEFM32GG990F1024
endif

ifeq (-DEFM32LG, $(findstring -DEFM32LG,$(CFLAGS)))
EM_INCDIR := EFM32LG
SYSTEM_EFM32_C := system_efm32lg.c
else ifeq (-DEFM32GG, $(findstring -DEFM32GG,$(CFLAGS)))
EM_INCDIR := EFM32GG
SYSTEM_EFM32_C := system_efm32gg.c
else
$(error unknown efm32 part)
endif

ext := $(patsubst "%",%,$(strip $(CONFIG_ARCH_CHIP_EFM32_EMLIB_PATH)))

ifeq ($(WINTOOL),y)
CFLAGS += -I"${shell cygpath -w $(ext)/CMSIS/Include}"
CFLAGS += -I"${shell cygpath -w $(ext)/Device/EnergyMicro/$(EM_INCDIR)/Include}"
CFLAGS += -I"${shell cygpath -w $(ext)/emlib/inc}"
else
CFLAGS += -I$(ext)/CMSIS/Include
CFLAGS += -I$(ext)/Device/EnergyMicro/$(EM_INCDIR)/Include
CFLAGS += -I$(ext)/emlib/inc
endif

VPATH += $(ext)/emlib/src
VPATH += $(ext)/Device/EnergyMicro/$(EM_INCDIR)/Source

HEAD_ASRC  =
CMN_UASRCS =
CMN_UCSRCS =

CMN_ASRCS  = up_saveusercontext.S up_fullcontextrestore.S up_switchcontext.S
CMN_ASRCS += up_exception.S
CMN_ASRCS += vfork.S

ifeq ($(CONFIG_ARCH_MEMCPY),y)
CMN_ASRCS += up_memcpy.S
endif

CMN_CSRCS  = up_allocateheap.c up_assert.c up_blocktask.c up_copyfullstate.c
CMN_CSRCS += up_createstack.c up_mdelay.c up_udelay.c up_exit.c
CMN_CSRCS += up_initialize.c up_initialstate.c up_interruptcontext.c
CMN_CSRCS += up_memfault.c up_modifyreg8.c up_modifyreg16.c up_modifyreg32.c
CMN_CSRCS += up_releasepending.c up_releasestack.c up_reprioritizertr.c
CMN_CSRCS += up_schedulesigaction.c up_sigdeliver.c up_systemreset.c
CMN_CSRCS += up_unblocktask.c up_usestack.c up_doirq.c up_hardfault.c
CMN_CSRCS += up_svcall.c up_vfork.c
CMN_CSRCS += up_vectors.c

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
CMN_CSRCS += up_ramvec_initialize.c up_ramvec_attach.c
endif

ifeq ($(CONFIG_NUTTX_KERNEL),y)
CMN_CSRCS += up_mpu.c up_task_start.c up_pthread_start.c up_stackframe.c
ifneq ($(CONFIG_DISABLE_SIGNALS),y)
CMN_CSRCS += up_signal_dispatch.c
CMN_UASRCS += up_signal_handler.S
endif
endif

ifeq ($(CONFIG_DEBUG_STACK),y)
CMN_CSRCS += up_checkstack.c
endif

ifeq ($(CONFIG_ELF),y)
CMN_CSRCS += up_elf.c
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += up_fpu.S
ifneq ($(CONFIG_ARMV7M_CMNVECTOR),y)
CMN_CSRCS += up_copyarmstate.c
endif
endif

CHIP_ASRCS  = efm32_vectors.S

CHIP_CSRCS = \
efm32_irq.c \
efm32_start.c \
efm32_timerisr.c \
em_cmu.c \
em_emu.c \
em_gpio.c \
em_usart.c \
$(SYSTEM_EFM32_C)

ifeq ($(CONFIG_DEV_LOWCONSOLE),y)
CHIP_CSRCS += efm32_lowputc.c
endif

ifneq ($(CONFIG_IDLE_CUSTOM),y)
CHIP_CSRCS += efm32_idle.c
endif
